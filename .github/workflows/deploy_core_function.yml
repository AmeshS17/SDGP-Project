# This is a basic workflow to help you get started with Actions

name: Deploy model and dependant functions to AWS Lambda

# Controls when the action will run. 
on:
  # Triggers the workflow on push but only for the main branch
  push:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deploy_model:
    name: Deploy model
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        
        #AWS ECR image push Step (1/3) - Configuring AWS credentials
      - name: Configure AWS credentials - Step (1/3)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

        #AWS ECR image push Step (2/3) - Logging in to ECR using configured credentials
      - name: Login to Amazon ECR - Step (2/3)
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

        #AWS ECR image push Step (3/3) - Build and push image to ECR repo
      - name: Build, tag, and push image to Amazon ECR - Step (3/3)
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: model
          IMAGE_TAG: latest
        run: |
          cd ./Backend/Lambda_Functions/generate_summary
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Deploy AWS Lambda function using uploaded image
      - name: Deploy function
        uses: appleboy/lambda-action@master
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: us-west-2
          function_name: generate_summary
          image_uri: ${{ steps.login-ecr.outputs.registry }}/model:latest
          
  deploy_preprocessor:
    name: Deploy text preprocessor
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

        #AWS ECR image push Step (1/3) - Configuring AWS credentials
      - name: Configure AWS credentials - Step (1/3)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

        #AWS ECR image push Step (2/3) - Logging in to ECR using configured credentials
      - name: Login to Amazon ECR - Step (2/3)
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

        #AWS ECR image push Step (3/3) - Build and push image to ECR repo
      - name: Build, tag, and push image to Amazon ECR - Step (3/3)
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: preprocessor
          IMAGE_TAG: latest
        run: |
          cd ./Backend/Lambda_Functions/preprocess_text
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


      # Deploy AWS Lambda function using uploaded image
      - name: Deploy function
        uses: appleboy/lambda-action@master
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: us-west-2
          function_name: preprocess_text
          image_uri: ${{ steps.login-ecr.outputs.registry }}/preprocessor:latest
          
  
  deploy_retriever:
    name: Deploy results retriever
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # Zips preprocess_text.py
      - name: Zip retrieve_summary function
        uses: montudor/action-zip@v0.1.0
        with:
          args: zip -qq ./retrieve_summary.zip ./Backend/Lambda_Functions/retrieve_summary/retrieve_summary.py
          
      # Deploys the script to AWS Lambda
      - name: Deploy retrieve_summary function to lambda function retrieve_summary
        uses: appleboy/lambda-action@master
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: us-west-2
          function_name: retrieve_summary
          zip_file: retrieve_summary.zip
        
  deploy_url_generator:
    name: Deploy url generator
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # Zips preprocess_text.py
      - name: Zip generate_s3_upload_url function
        uses: montudor/action-zip@v0.1.0
        with:
          args: zip -qq ./generate_s3_upload_url.zip ./Backend/Lambda_Functions/generate_s3_upload_url/generate_s3_upload_url.py
          
      # Deploys the script to AWS Lambda
      - name: Deploy generate_s3_upload_url function to lambda function generate_s3_upload_url
        uses: appleboy/lambda-action@master
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: us-west-2
          function_name: generate_s3_upload_url
          zip_file: generate_s3_upload_url.zip
          
  deploy_async_model_trigger:
    name: Deploy async model trigger
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # Zips preprocess_text.py
      - name: Zip async_invoke_model function
        uses: montudor/action-zip@v0.1.0
        with:
          args: zip -qq ./async_invoke_model.zip ./Backend/Lambda_Functions/async_invoke_model/async_invoke_model.py
          
      # Deploys the script to AWS Lambda
      - name: Deploy async_invoke_model function to lambda function async_invoke_model
        uses: appleboy/lambda-action@master
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: us-west-2
          function_name: async_invoke_model
          zip_file: async_invoke_model.zip

  deploy_game_listing:
    name: Deploy game listing service
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Zips get_games.py
      - name: Zip get_games function
        uses: montudor/action-zip@v0.1.0
        with:
          args: zip -qq ./get_games.zip ./Backend/Lambda_Functions/get_games/get_games.py
          
      # Deploys the script to AWS Lambda
      - name: Deploy get_games function to lambda function get_games
        uses: appleboy/lambda-action@master
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: us-west-2
          function_name: get_games
          zip_file: get_games.zip

  test_upload_session:
    needs: [deploy_model,deploy_preprocessor,deploy_retriever,deploy_url_generator,deploy_async_model_trigger,deploy_game_listing]
    name: Test run an upload session
    
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Setup python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Execute test upload session
        run: python "./Backend/Tests/test_upload_session/test_upload_session.py"

  test_search_session:
    if: ${{ false }}
    needs: [deploy_model,deploy_preprocessor,deploy_retriever,deploy_url_generator,deploy_async_model_trigger,deploy_game_listing]
    name: Test run a search session
    
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Setup python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Execute test upload session
        run: python "./Backend/Tests/test_search_session/test_search_session.py"




